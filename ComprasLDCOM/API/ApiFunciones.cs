using CommunityToolkit.Maui.Views;
using CommunityToolkit.Maui.Alerts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ComprasLDCOM.Popups.General;
using System.Reflection;
using ComprasLDCOM.Datos.Carrito.BaseDeDatos;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using ComprasLDCOM.Datos.Inicio.Request;
using ComprasLDCOM.Datos.Carrito.Request;
using ComprasLDCOM.Datos.Carrito.Response;

namespace ComprasLDCOM.API
{ 
    public class ApiFunciones
    {
        const int smallWightResolution = 720;
        const int smallHeightResolution = 1280;

        public string LogoApp = "";
        public string LogoFavoritosVacio = "";
        public string LogoFavoritosSolido = "";


        #region enum        

        /// <summary>
        /// Enum con las Formas de pago
        /// </summary>
        enum FormaPago
        {
            Efectivo = 1,
            TarjetaDebito = 2,
            TarjetaCredito = 2,
            Cupones = 3,
            Cheques = 4,
            MonedaExtranjera = 5,
            NotaCredito = 6,
            Monedero = 7,
            Transferencia = 8,
            ValeDespensa = 12,
            Laboratorio = 20
        }

        /// <summary>
        /// Enum con los Tipos de Monedas
        /// </summary>
        enum TipoMoneda
        {
            Dolar = 0,
            PesoMx = 1
        }

        #endregion

        public PopupPageEspera popEspera = null;

        /// <summary>
        /// Se muestra el PopUp de Espera
        /// </summary>
        public void PopupEspera()
        {
            try
            {
                if (popEspera == null)
                {
                    popEspera = new();
                    Application.Current.MainPage.ShowPopup(popEspera);
                }
            }
            catch (Exception)
            {
                return;
            }
        }

        /// <summary>
        /// Cierra el PopUp de Espera
        /// </summary>
        public void PopupCerrar()
        {
            try
            {
                if (popEspera != null)
                {
                    popEspera.CerrarPopup();
                    popEspera = null;
                }
            }
            catch (Exception)
            {
                return;
            }
        }

        /// <summary>
        /// Número de autorización que regresa la Api al hacer el Pago con Monedero
        /// </summary>
        private string PagoMonedero_Autorizacion = "";

        /// <summary>
        /// Número de autorización que regresa la Api al hacer la Bonificación al Monedero
        /// </summary>
        private string BonificacionMonedero_Autorizacion = "";

        /// <summary>
        /// BuscaValorArray - Para buscar el valor de un indice en un array
        /// </summary>
        /// <param name="A">string[] - El arreglo donde se buscara</param>
        /// <param name="Texto">string - El texto que se buscara en el array</param>
        public string BuscaValorArray(System.String[] A, string Texto)
        {
            string Valor = "";
            for (int i = 0; i <= A.Length - 1; i++)
            {
                if (A[i].IndexOf(Texto) >= 0)
                {
                    Valor = A[i].Substring(A[i].IndexOf(":") + 1).Replace("am", "").Replace("pm", "").Replace("a.m.", "").Replace("p.m.", "").Replace("a. m.", "").Replace("p. m.", "").Replace("a m", "").Replace("p m", "").Replace("AM", "").Replace("PM", "").Replace("A.M.", "").Replace("P.M.", "").Replace("A. M.", "").Replace("P. M.", "").Replace("A M", "").Replace("P M", "").Replace("{","").Replace("}", "").Replace("[", "").Replace("]", "");
                    break;
                }
            }
            return Valor;
        }

        /// <summary>
        /// Valida en base a la resolucion de la pantalla si el dispositivo es un smartphone o una tableta
        /// </summary>
        public bool EsDispositivoPequeño()
        {
            // Get Metrics
            var mainDisplayInfo = DeviceDisplay.MainDisplayInfo;

            // Width (in pixels)
            var width = mainDisplayInfo.Width;

            // Height (in pixels)
            var height = mainDisplayInfo.Height;
            return (width <= smallWightResolution && height <= smallHeightResolution);
        }

        /// <summary>
        /// BuscaValorArray - Para buscar el valor de un indice en un array
        /// </summary>
        /// <param name="valor">string - el valor que se evaluara</param>
        public bool IsNumeric(string valor)
        {
            if (valor.All(char.IsLetter))
                return false;
            else
                return true;
        }

        /// <summary>
        /// Base64aImagen - Para convertir una cadena en Base64 al tipo Imagesource
        /// </summary>
        /// <param name="base64String">string - el valor que se convertira</param>
        public ImageSource Base64aImagen(string base64String)
        {
            byte[] Base64Stream = Convert.FromBase64String(base64String);
            Image image = new();
            return ImageSource.FromStream(() => new MemoryStream(Base64Stream));
        }

        /// <summary>
        /// ImagenABase64 - Para convertir una objeto Imagesource al tipo Base64
        /// </summary>
        /// <param name="img">imagesource - el valor que se convertira</param>
        public string ImagenABase64(ImageSource img)
        {
            StreamImageSource streamImageSource = (StreamImageSource)img;
            System.Threading.CancellationToken cancellationToken = System.Threading.CancellationToken.None;
            Task<Stream> task = streamImageSource.Stream(cancellationToken);
            Stream stream = task.Result;
            byte[] bytesAvailable = new byte[stream.Length];
            stream.Read(bytesAvailable, 0, bytesAvailable.Length);
            return Convert.ToBase64String(bytesAvailable);
        }

        /// <summary>
        /// ObtieneValorPropiedad - Para obtener el valor de un campo espepcifico en una lista
        /// </summary>
        /// <param name="obj">obj - el objeto con los campos donde se buscara</param>
        /// <param name="NombreCampo">string - El nombre del campo a buscar</param>
        public string ObtieneValorPropiedad(object obj, string NombreCampo)
        {
            if (obj == null) return "";

            string Valor = "";
            Type tipo = obj.GetType();
            PropertyInfo[] props = tipo.GetProperties();
            foreach (var prop in props)
                if (prop.Name == NombreCampo)
                {
                    Valor = prop.GetValue(obj).ToString();
                    break;
                }

            return Valor;
        }

        /// <summary>
        /// Se crea la Venta y se manda a Guardar a la Api
        /// </summary>
        public async void crear_Venta(bool pIsSelected_Redimir, string pTotal_MontoCapturado, string pTotal, string pTotal_Monedero,
            string pNumTarjeta, string pNumVoucher, string pNumCupon, string pPromociones)
        {
            bool PagoMonedero_Exitoso = false;
            bool BonificacionMonedero_Exitoso = false;

            if (pIsSelected_Redimir == true)
            {
                PagoMonedero_Exitoso = await Crear_PagoMonedero(pTotal_Monedero, pTotal_MontoCapturado);
                BonificacionMonedero_Exitoso = await Crear_BonificacionMonedero(0, pTotal, pTotal_Monedero);
            }

            if (pIsSelected_Redimir == true && PagoMonedero_Exitoso == true || pIsSelected_Redimir == false)
            {
                string Clientev = App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CLIENTE_VIRTUAL", "Valor");
                int emp_id = int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "EMPRESA_VIRTUAL", "Valor"));
                int tipoDoc_id = int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "IdTipoDocumento"));
                int suc_id = App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "SucursalClickCollect_Id") == "" ? int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "SUCURSAL_VIRTUAL", "Valor")) : int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "SucursalClickCollect_Id"));
                int caja_id = int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CAJA_VIRTUAL", "Valor"));
                int tipo_id = 1;
                int subDoc_id = 1;
                int cliente_id = int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "IdTipoCliente"));
                int usuario_id = int.Parse(Clientev);
                int convenio_id = 0;
                double cambio;

                if (tipoDoc_id == 4) //Venta Crédito
                    cambio = 0;
                else
                    cambio = double.Parse(Math.Round(float.Parse(pTotal_MontoCapturado) - float.Parse(pTotal), 2).ToString("N2"));

                string medico_cedula = App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "MedicoCedula") == null ? "" : App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "MedicoCedula");


                ReqVentaEncabezado vEncabezado = new ReqVentaEncabezado(
                    emp_id, tipoDoc_id, suc_id, caja_id, tipo_id,
                    subDoc_id, cliente_id, 0, usuario_id,
                    0, convenio_id, "",
                    0, cambio, medico_cedula,
                    App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "IdSocioMonedero"),
                    BonificacionMonedero_Autorizacion);

                TblCarrito carrito = new();
                List<TblCarrito> CartArt = App.ServiciosBD.ObtenerListaEntidadLocal(new TblCarrito().GetType().Name).OfType<TblCarrito>().ToList();
                List<object> lista_Detalle = new List<object>();
                foreach (TblCarrito producto in CartArt)
                {
                    ReqVentaDetalle vDetalle = new ReqVentaDetalle(
                        producto.SkuArticulo,
                        producto.Piezas,
                        float.Parse(producto.PrecioUnitario.ToString("N2")),
                        producto.DescuentoMonto,
                        producto.DescuentoPorcentaje,
                        producto.Lote_Caducidad,
                        producto.TotalProducto,
                        producto.IvaMonto,
                        producto.IvaPorcentaje,
                        producto.IepsMonto,
                        producto.IepsPorcentaje,
                        0);
                    lista_Detalle.Add(vDetalle);
                }

                TblFormasPago Pay = new();
                List<TblPayment> pagos = App.ServiciosBD.ObtenerListaEntidadLocal(new TblPayment().GetType().Name).OfType<TblPayment>().ToList();
                List<object> lista_FormaPago = new List<object>();

                for (int i = 0; i < pagos.Count; i++)
                {
                    TblPayment pago = (TblPayment)pagos[i];
                    if (pago.TipoPago == "Efectivo")
                    {
                        string monto_efectivo;
                        if (double.Parse(pago.MontoPagado) >= double.Parse(pago.MontoCapturado))
                        {
                            monto_efectivo = pago.MontoCapturado;
                        }
                        else
                        {
                            monto_efectivo = pago.MontoPagado;
                        }
                        TblVentaFormaPago vFormaPagoE = new TblVentaFormaPago(
                           (int)FormaPago.Efectivo,
                           "",
                           "",
                           (int)TipoMoneda.PesoMx,
                           0,
                           "",
                           0,
                           Math.Round(double.Parse(monto_efectivo), 2),
                           Math.Round(double.Parse(monto_efectivo), 2),
                           0,
                           0, 0, 0,
                           0
                           );
                        lista_FormaPago.Add(vFormaPagoE);
                    }
                    else if (pago.TipoPago == "Tarjeta Bancaria")
                    {
                        TblVentaFormaPago vFormaPago = new TblVentaFormaPago(
                            (int)FormaPago.TarjetaDebito,
                            pNumTarjeta,
                            pNumVoucher,
                            (int)TipoMoneda.PesoMx,
                            0,
                            "",
                            0,
                            Math.Round(double.Parse(pago.MontoCapturado), 2),
                            Math.Round(double.Parse(pago.MontoCapturado), 2),
                            0,
                            0, 0, 0,
                            1
                        );
                        lista_FormaPago.Add(vFormaPago);
                    }                          
                    else if (pago.TipoPago == "Monedero")
                    {
                        TblVentaFormaPago vFormaPago = new TblVentaFormaPago(
                            (int)FormaPago.Monedero,
                            App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "NumMonedero"),
                            PagoMonedero_Autorizacion,
                            0,
                            0,
                            App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", Clientev, "IdSocioMonedero"),
                            0,
                            Math.Round(double.Parse(pago.MontoCapturado), 2),
                            Math.Round(double.Parse(pago.MontoCapturado), 2),
                            0,
                            0,
                            0,
                            0,
                            0
                        );
                        lista_FormaPago.Add(vFormaPago);
                    }
                }


                if (App.ServiciosBD.ObtenerListaEntidadLocal(new TblArticulosCupones().GetType().Name).OfType<TblArticulosCupones>().ToList().Count > 0)
                {
                    List<TblArticulosCupones> ArtCup = App.ServiciosBD.ObtenerListaEntidadLocal(new TblArticulosCupones().GetType().Name).OfType<TblArticulosCupones>().ToList();
                    foreach (TblArticulosCupones artcup in ArtCup)
                    {
                        if (artcup.Articulo != "" && artcup.Monto > 0)
                        {
                            TblVentaFormaPago vFormaPago = new TblVentaFormaPago(
                            (int)FormaPago.Cupones,
                            "",
                            artcup.Articulo,
                            0,
                            0,
                            "",
                            0,
                            Convert.ToDouble(artcup.Monto),
                            Convert.ToDouble(artcup.Monto),
                            0,
                            0, 0, 0,
                            0);
                            lista_FormaPago.Add(vFormaPago);
                        }
                    }
                }

                TblVentaMedico vVentaMedico = new("", "", "", "", "");
                
                ApiDataStore DStore = new();
                var jsonEncabezado = Newtonsoft.Json.JsonConvert.SerializeObject(vEncabezado);
                var jsonDetalle = Newtonsoft.Json.JsonConvert.SerializeObject(lista_Detalle);
                var jsonFormaPago = Newtonsoft.Json.JsonConvert.SerializeObject(lista_FormaPago);
                var jsonControlado = Newtonsoft.Json.JsonConvert.SerializeObject(vVentaMedico);

                ResVenta ResInsert = new();
                ResInsert = await DStore.Inserta_Venta(jsonEncabezado, jsonDetalle, jsonFormaPago, jsonControlado);
              
                if (ResInsert.ToString() == "" || ResInsert == null || ResInsert.ToString() == "0")
                {
                    PopupCerrar();
                    var toast = Toast.Make("Hubo un error al registrar la venta, por favor intente nuevamente.", CommunityToolkit.Maui.Core.ToastDuration.Long, 15);
                    await toast.Show();
                    return;
                }
                else if (ResInsert.IsSuccessful == "false")
                {
                    PopupCerrar();
                    var toast = Toast.Make(ResInsert.Message, CommunityToolkit.Maui.Core.ToastDuration.Long, 15);
                    await toast.Show();
                    return;
                }
                else
                {
                    PopupCerrar();
                    await App.Current.MainPage.DisplayAlert("Pago", "Se registró exitosamente la venta con el número de Ticket: " + ResInsert.Data, "Aceptar");
                }

                if (ResInsert.Data != "" && ResInsert.Data != null)
                {
                    foreach (TblPayment pago in pagos)
                    {
                        TblPayment Pay1 = new();
                        Pay1.IdCarrito = pago.IdCarrito;
                        Pay1.TipoPago = pago.TipoPago;
                        Pay1.MontoCapturado = pago.MontoCapturado;
                        Pay1.TotalMontoCapturado = pago.TotalMontoCapturado;
                        Pay1.NumTarjeta = pago.NumTarjeta;
                        Pay1.IdBanco = pago.IdBanco;
                        Pay1.NombreBanco = pago.NombreBanco;
                        Pay1.NumVoucher = pago.NumVoucher;
                        if (ResInsert.Data != "")
                            Pay1.Ticket = int.Parse(ResInsert.Data);
                        else
                            Pay1.Ticket = 1;

                        App.ServiciosBD.ActualizarRegistroEntidadLocal(Pay1);                        
                        App.ServiciosBD.LimpiarEntidadLocal(new TblArticulosCupones());
                    }                   
                    PopupCerrar();
                }

                if (pagos.Count > 0)
                    await Shell.Current.GoToAsync($"Totales?descuento={pPromociones}&ventaTotal={pTotal}&cambio={cambio}");
                else if (pagos.Count == 0) //Cuando es una compra a Crédito
                    await App.Current.MainPage.DisplayAlert("Pago", "No se registraron Formas de Pago", "Aceptar");
                await Shell.Current.GoToAsync($"Totales?descuento={0}&ventaTotal={0}&cambio={0}");

            }
        }

        public TblCarrito ConvertirArticuloACarrito(Articulo Art, int SumaPiezas, string IdOrder = "0", bool Nuevo = false, bool PzsManuales = false)
        {
            TblCarrito Cart = new();
            decimal desc_porc = 0;
            decimal desc_monto = 0;
            decimal monto_iva = 0;

            if (Nuevo)
                Cart.IdCarrito = NuevoIdOrden(IdOrder, Nuevo); 
            else
            {               
                Cart.IdCarrito = App.ServiciosBD.ObtenerListaEntidadLocal(new TblCarrito().GetType().Name).OfType<TblCarrito>().ToList().Where(x => x.SkuArticulo.ToString() == Art.Sku).ToList()[0].IdCarrito;
            }

            if (PzsManuales)
                Cart.Piezas = SumaPiezas;
            else
                Cart.Piezas = (Art.Piezas + SumaPiezas) <= 0 ? 1 : (Art.Piezas + SumaPiezas) > Cart.CantDisponible ? (Art.Piezas + SumaPiezas) : (Art.Piezas + SumaPiezas);

            desc_porc = Art.DescuentoPorcentaje_Origen;
            desc_monto = Art.DescuentoMonto_Origen;

            monto_iva = (Art.PrecioUnitario - desc_monto) * (Art.IvaPorcentaje / 100);

            Cart.SkuArticulo = Art.Sku;
            Cart.CantDisponible = Art.CantDisponible;
            Cart.Nombre = Art.Nombre;
            Cart.Precio = Art.Precio;
            Cart.PrecioMaximo = Art.PrecioMaximo;
            Cart.PrecioUnitario = Art.PrecioUnitario;
            Cart.DescuentoMonto_Origen = Art.DescuentoMonto_Origen;
            Cart.DescuentoPorcentaje_Origen = Art.DescuentoPorcentaje_Origen;
            Cart.NombreDescuento = Art.NombreDescuento;
            Cart.IvaPorcentaje = Art.IvaPorcentaje;
            Cart.IepsMonto = Art.IepsMonto;
            Cart.IepsPorcentaje = Art.IepsPorcentaje;
            Cart.NombrePromocion = Art.NombrePromocion;
            Cart.Imagen = App.Funciones.ImagenABase64(Art.Imagen);

            Cart.DescuentoMonto = desc_monto;
            Cart.DescuentoPorcentaje = desc_porc;
            Cart.IvaMonto = monto_iva;
            Cart.TotalUnitario = (Art.PrecioUnitario + monto_iva);
            Cart.SubTotalProducto = (Cart.TotalUnitario * Cart.Piezas);
            Cart.TotalDescuento = (desc_monto * Cart.Piezas);
            Cart.TotalProducto = ((Cart.TotalUnitario * Cart.Piezas) - Cart.TotalDescuento);

            Cart.Tiene_Serie = Art.Tiene_Serie;
            Cart.Tiene_Caducidad = Art.Tiene_Caducidad;
            Cart.Articulo_Suelto = Art.Articulo_Suelto;
            Cart.Costo_Unitario = Art.Costo_Unitario;
            Cart.Articulo_Regalo = Art.Articulo_Regalo;
            Cart.IsVisiableIncremento = true;
            Cart.Promocion_Base = Art.Promocion_Base;
            Cart.Promocion_Regalo = Art.Promocion_Regalo;
            Cart.IsVisibleLowCostGif = Art.IsVisibleLowCostGif;
            Cart.Controlado = Art.Controlado;            
            Cart.Imagen_BajoCosto = App.Funciones.ImagenABase64(Art.Imagen);
            return Cart;
        }

        public Articulo ConvierteCarritoAArticulo(TblCarrito Cart)
        {
            Articulo Art = new Datos.Inicio.Request.Articulo(
                Cart.SkuArticulo,
                Cart.Nombre,
                Convert.ToDecimal(Cart.Precio),
                Cart.PrecioMaximo,
                Cart.PrecioUnitario,
                Cart.DescuentoMonto = Cart.DescuentoMonto,
                Cart.DescuentoMonto_Origen,
                Cart.DescuentoPorcentaje,
                Cart.DescuentoPorcentaje_Origen,
                Cart.NombreDescuento,
                Cart.IvaMonto,
                Cart.IvaPorcentaje,
                Cart.IepsMonto,
                Cart.IepsPorcentaje,
                Cart.CantDisponible,
                Cart.NombrePromocion,
                App.Funciones.Base64aImagen(Cart.Imagen),
                Cart.Imagen,
                Cart.Piezas,
                Cart.TotalProducto,
                Cart.TotalDescuento,
                Cart.TotalUnitario,
                Cart.SubTotalProducto,
                new List<Datos.Inicio.Request.ReqInfoArt>(),
                Cart.Tiene_Serie,
                Cart.Tiene_Caducidad,
                Cart.Articulo_Suelto,
                Cart.Costo_Unitario,
                Cart.Articulo_Regalo,
                Cart.IsVisiableIncremento,
                Cart.Promocion_Base,
                Cart.Promocion_Regalo,
                Cart.IsVisibleLowCostGif,
                Cart.Controlado,
                Cart.Lote_Caducidad,
                Cart.Descuento_Porc_Lote,
                Cart.IsVisibleLote,
                App.Funciones.Base64aImagen(Cart.Imagen_BajoCosto),
                Cart.Imagen_BajoCosto,
                null);
            return Art;
        }

        /// <summary>
        /// Ordena los Artículos mostrando primero el último agregado o modificado en piezas
        /// </summary>
        /// <param name="IdOrder">posición actual</param>
        /// <param name="Nuevo">nueva posición</param>
        /// <returns></returns>
        private string NuevoIdOrden(string IdOrder, bool Nuevo)
        {
            TblCarrito Cart = new();
            if (Nuevo)
            {
                List<TblCarrito> Car = App.ServiciosBD.ObtenerListaEntidadLocal(new TblCarrito().GetType().Name).OfType<TblCarrito>().ToList();
                if (Car.Count() > 0)
                {
                    TblCarrito C = Car.MaxBy(x => Convert.ToInt32(x.IdCarrito));
                    return (Convert.ToInt32(C.IdCarrito) + 1).ToString();
                }
                else
                    return "1";
            }
            else
                return IdOrder;
        }

        /// <summary>
        /// Agrega o actualiza la Forma de Pago
        /// </summary>
        /// <param name="obj">Forma de Pago que se agregara o actualizara</param>
        public async void AgregarAPago(TblPayment obj)
        {
            try
            {
                ApiDataStore Api = new();
                TblPayment Pay = new();
                List<TblPayment> Pagos = App.ServiciosBD.ObtenerListaEntidadLocal("TblPayment").OfType<TblPayment>().ToList();
                List<TblPayment> lista = Pagos.Cast<TblPayment>().ToList();
                if (lista.Where(x => x.TipoPago == obj.TipoPago).ToList().Count > 0)
                {
                    Pay.IdCarrito = 1;
                    Pay.TipoPago = obj.TipoPago;
                    Pay.MontoPagado = obj.MontoPagado;
                    Pay.MontoCapturado = obj.MontoCapturado;
                    Pay.TotalMontoCapturado = obj.TotalMontoCapturado;
                    Pay.IdBanco = obj.IdBanco;
                    Pay.NombreBanco = obj.NombreBanco;
                    Pay.NumTarjeta = obj.NumTarjeta;
                    Pay.NumVoucher = obj.NumVoucher;
                    Pay.Ticket = obj.Ticket;

                    App.ServiciosBD.ActualizarRegistroEntidadLocal(Pay);
                }
                else
                {
                    Pay.IdCarrito = 1;
                    Pay.TipoPago = obj.TipoPago;
                    Pay.MontoPagado = obj.MontoPagado;
                    Pay.MontoCapturado = obj.MontoCapturado;
                    Pay.TotalMontoCapturado = obj.TotalMontoCapturado;
                    Pay.IdBanco = obj.IdBanco;
                    Pay.NombreBanco = obj.NombreBanco;
                    Pay.NumTarjeta = obj.NumTarjeta;
                    Pay.NumVoucher = obj.NumVoucher;
                    Pay.Ticket = obj.Ticket;

                    App.ServiciosBD.AgregarRegistroEntidadLocal(Pay);
                }
            }
            catch (Exception ex)
            {
                var toast = Toast.Make("Error al agregar la Forma de Pago. ERR: " + ex.Message, CommunityToolkit.Maui.Core.ToastDuration.Long, 15);
                await toast.Show();
            }
        }

        /// <summary>
        /// Crea el Pago a Monedero_Lealtad
        /// </summary>
        /// <returns>Valor boolenano de si el pago fue o no exitoso</returns>
        public async Task<bool> Crear_PagoMonedero(string pTotal_Monedero, string pTotal_MontoCapturado)
        {
            bool PagoExitoso = false;
            try
            {
                ApiDataStore Api = new();
                string pOrigen = "PV";
                bool pNo_Acumula_Lealtad = false;
                int pAutorizador_Id = 3; // Valor Fijo mencionó Edwin

                var ResPagoMonedero = await Api.ObtenerPagoMonedero(int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "EMPRESA_VIRTUAL", "Valor")), pAutorizador_Id, int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "SUCURSAL_VIRTUAL", "Valor")), int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CAJA_VIRTUAL", "Valor")), long.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", "NumMonedero", "Valor")), App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CLIENTE_VIRTUAL", "Valor"), pTotal_Monedero.Replace(",", ""), pOrigen, int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", "TipoDocumento", "Valor")), App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CLIENTE_VIRTUAL", "Valor"), pNo_Acumula_Lealtad);

                if (ResPagoMonedero != null && !ResPagoMonedero.Equals(""))
                {
                    String[] Detalle = ResPagoMonedero.ToString().Split(",");

                    if (Detalle[2].Length > Detalle[2].IndexOf(':') + 2)
                    {
                        PagoExitoso = bool.Parse(Detalle[2].Substring(Detalle[2].IndexOf(':') + 1, Detalle[2].Length - Detalle[2].IndexOf(':') - 1));
                        PagoMonedero_Autorizacion = Detalle[5].Substring(Detalle[5].IndexOf(':') + 2, Detalle[5].Length - Detalle[5].IndexOf(':') - 3);

                        TblPayment Pay = new();
                        Pay.IdCarrito = 1;
                        Pay.TipoPago = "Monedero";
                        Pay.MontoPagado = pTotal_Monedero;
                        Pay.MontoCapturado = pTotal_Monedero;
                        Pay.TotalMontoCapturado = pTotal_MontoCapturado;
                        Pay.IdBanco = 0;
                        Pay.NombreBanco = "";
                        Pay.NumTarjeta = "";
                        Pay.NumVoucher = PagoMonedero_Autorizacion;
                        Pay.Ticket = 0;

                        AgregarAPago(Pay);
                    }
                    else
                    {
                        PagoExitoso = false;
                    }
                }
                return PagoExitoso;
            }
            catch (Exception)
            {
                var toast = Toast.Make("Error al hacer el Pago con Monedero.", CommunityToolkit.Maui.Core.ToastDuration.Long, 15);
                await toast.Show();
                return PagoExitoso;
            }
        }
        
        /// <summary>
        /// Se crea la Bonificación al Monedero
        /// </summary>
        /// <param name="vTicket">Número del Ticket de Venta hecha</param>
        /// <param name="pTotal">Monto Total de la Venta</param>
        /// <param name="pTotal_Monedero"></param>
        /// <returns></returns>
        public async Task<bool> Crear_BonificacionMonedero(int vTicket, string pTotal, string pTotal_Monedero)
        {
            bool BonificacionExitoso = false;
            try
            {
                ApiDataStore Api = new();
                string pOrigen = "PV";
                bool pNo_Acumula_Lealtad = false;
                int pAutorizador_Id = 3; // Valor Fijo mencionó Edwin
                int pTicket = vTicket;
                string pProductos = ""; //0001 750112510479400003330 

                List<object> pListaFormaPago = new List<object>();
                //[{"FormaPago_Id": 1, "FormaPago_Monto": 50}]
                pListaFormaPago.Add(new TblBonificacionMonederoFormaPago() { FormaPago_Id = 1, FormaPago_Monto = pTotal.Replace(",", "") });
                var jsonFormaPago = Newtonsoft.Json.JsonConvert.SerializeObject(pListaFormaPago);

                //pProductos = debe ir de la siguiente manera cantidad 4 campos rellenos de 0(Format(Cantidad, "0000"))
                //             Articulo 14 campos espacio a la izquierda(RellenaEspacioIzquierda(Articulo, 14))
                //             Monto de línea 8 campos rellenos de 0(Format(_MontoLinea * 100, "00000000"))
                //             pListaFormaPago = Vacio

                List<TblCarrito> CartArt = App.ServiciosBD.ObtenerListaEntidadLocal(new TblCarrito().GetType().Name).OfType<TblCarrito>().ToList();
                foreach (TblCarrito producto in CartArt)
                {
                    string monto = Math.Round(producto.TotalProducto, 2).ToString();
                    if (monto.Contains("."))
                    {
                        string DespuesPunto = monto.Substring(monto.IndexOf(".") + 1);
                        if (DespuesPunto.Length == 1)
                        {
                            monto = monto.Replace(".", "") + "0";
                            monto = monto.PadLeft(8, '0');
                        }
                        else if (DespuesPunto.Length == 2)
                        {
                            monto = monto.Replace(".", "");
                            monto = monto.PadLeft(8, '0');
                        }
                    }
                    else
                    {
                        monto += "00";
                        monto = monto.PadLeft(8, '0');
                    }

                    pProductos += producto.Piezas.ToString("D4") + producto.SkuArticulo.PadLeft(14) + monto; 
                }

                var ResBonificacionMonedero = await Api.ObtenerBonificacionMonedero(int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "EMPRESA_VIRTUAL", "Valor")),
                                                                                    pAutorizador_Id,
                                                                                    int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "SUCURSAL_VIRTUAL", "Valor")),
                                                                                    int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CAJA_VIRTUAL", "Valor")),
                                                                                    pTicket,
                                                                                    long.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", "NumMonedero", "Valor")),
                                                                                    App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblConfiguracion", "CLIENTE_VIRTUAL", "Valor"),
                                                                                    decimal.Parse(pTotal_Monedero.Replace(",", "")),
                                                                                    pOrigen,
                                                                                    pProductos,
                                                                                    int.Parse(App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", "TipoDocumento", "Valor")),
                                                                                    App.ServiciosBD.ObtenerDatoRegistroEntidadLocal("TblGeneralesVenta", "TipoCliente", "Valor"),
                                                                                    pNo_Acumula_Lealtad,
                                                                                    jsonFormaPago);

                if (ResBonificacionMonedero != null && !ResBonificacionMonedero.Equals(""))
                {
                    BonificacionExitoso = ResBonificacionMonedero.DataL[0].Exitoso;
                    BonificacionMonedero_Autorizacion = ResBonificacionMonedero.DataL[0].Autorizacion;
                }

                return BonificacionExitoso;
            }
            catch (Exception)
            {
                var toast = Toast.Make("Error al hacer la Bonificación al Monedero.", CommunityToolkit.Maui.Core.ToastDuration.Long, 15);
                await toast.Show();
                return BonificacionExitoso;
            }
        } 

        /// <summary>
        /// Se busca el color dentro de ResourceDictionary
        /// </summary>
        /// <param name="keyName">Nombre del Color a Buscar</param>
        /// <returns></returns>
        public Color GetColorResourceValue(string keyName)
        {
            Color retVal;
            try
            {
                // Search all dictionaries
                var rd = App.Current.Resources.MergedDictionaries.First();
                retVal = (Color)rd[keyName];
            }
            catch (Exception)
            {
                retVal = Colors.Black;
            }

            return retVal;
        }


    }
}
